{
	"version": 3,
	"sources": [
		"InteractStatic.ts"
	],
	"names": [
		"browser",
		"domUtils",
		"extend",
		"is",
		"pointerUtils",
		"isNonNativeEvent",
		"InteractStatic",
		"constructor",
		"scope",
		"getPointerAverage",
		"pointerAverage",
		"getTouchBBox",
		"touchBBox",
		"getTouchDistance",
		"touchDistance",
		"getTouchAngle",
		"touchAngle",
		"getElementRect",
		"getElementClientRect",
		"matchesSelector",
		"closest",
		"globalEvents",
		"dynamicDrop",
		"version",
		"interact",
		"prototype",
		"target",
		"options",
		"interactable",
		"interactables",
		"get",
		"new",
		"events",
		"global",
		"key",
		"Object",
		"getOwnPropertyNames",
		"use",
		"plugin",
		"usePlugin",
		"isSet",
		"context",
		"on",
		"type",
		"listener",
		"string",
		"search",
		"trim",
		"split",
		"array",
		"eventType",
		"object",
		"prop",
		"actions",
		"push",
		"add",
		"document",
		"off",
		"index",
		"indexOf",
		"splice",
		"remove",
		"debug",
		"supportsTouch",
		"supportsPointerEvent",
		"stop",
		"interaction",
		"interactions",
		"list",
		"pointerMoveTolerance",
		"newValue",
		"number",
		"addDocument",
		"doc",
		"removeDocument"
	],
	"mappings": "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",
	"sourcesContent": [
		"/** @module interact */\nimport browser from '@interactjs/utils/browser'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport Interactable from './Interactable'\nimport { Options } from './defaultOptions'\nimport isNonNativeEvent from './isNonNativeEvent'\n\nexport interface InteractStatic {\n  (target: Interact.Target, options?: Options): Interactable\n}\n\nexport class InteractStatic {\n  // expose the functions used to calculate multi-touch properties\n  getPointerAverage  = pointerUtils.pointerAverage\n  getTouchBBox = pointerUtils.touchBBox\n  getTouchDistance = pointerUtils.touchDistance\n  getTouchAngle = pointerUtils.touchAngle\n\n  getElementRect = domUtils.getElementRect\n  getElementClientRect = domUtils.getElementClientRect\n  matchesSelector = domUtils.matchesSelector\n  closest = domUtils.closest\n\n  globalEvents: any = {}\n\n  dynamicDrop: (newValue?: boolean) => boolean | this\n\n  // eslint-disable-next-line no-undef\n  version = process.env.npm_package_version\n  interact: InteractStatic\n  scope: Interact.Scope\n\n  constructor (scope: Interact.Scope) {\n    this.scope = scope\n\n    const { prototype } = this.constructor\n\n    /**\n     * ```js\n     * interact('#draggable').draggable(true)\n     *\n     * var rectables = interact('rect')\n     * rectables\n     *   .gesturable(true)\n     *   .on('gesturemove', function (event) {\n     *       // ...\n     *   })\n     * ```\n     *\n     * The methods of this variable can be used to set elements as interactables\n     * and also to change various default settings.\n     *\n     * Calling it as a function and passing an element or a valid CSS selector\n     * string returns an Interactable object which has various methods to configure\n     * it.\n     *\n     * @global\n     *\n     * @param {Element | string} target The HTML or SVG Element to interact with\n     * or CSS selector\n     * @return {Interactable}\n     */\n    const interact = ((target, options) => {\n      let interactable = scope.interactables.get(target, options)\n\n      if (!interactable) {\n        interactable = scope.interactables.new(target, options)\n        interactable.events.global = this.globalEvents\n      }\n\n      return interactable\n    }) as InteractStatic\n\n    for (const key of Object.getOwnPropertyNames(this.constructor.prototype)) {\n      interact[key] = prototype[key]\n    }\n\n    extend(interact as any, this)\n    interact.constructor = this.constructor\n    this.interact = interact\n\n    return interact\n  }\n\n  /**\n   * Use a plugin\n   *\n   * @alias module:interact.use\n   *\n   * @param {Object} plugin\n   * @param {function} plugin.install\n   * @return {InteractStatic}\n   */\n  use (plugin: Interact.Plugin, options?: { [key: string]: any }) {\n    this.scope.usePlugin(plugin, options)\n\n    return this\n  }\n\n  /**\n   * Check if an element or selector has been set with the {@link interact}\n   * function\n   *\n   * @alias module:interact.isSet\n   *\n   * @param {Element} element The Element being searched for\n   * @return {boolean} Indicates if the element or CSS selector was previously\n   * passed to interact\n   */\n  isSet (target: Interact.Element, options?: any) {\n    return !!this.scope.interactables.get(target, options && options.context)\n  }\n\n  /**\n   * Add a global listener for an InteractEvent or adds a DOM event to `document`\n   *\n   * @alias module:interact.on\n   *\n   * @param {string | array | object} type The types of events to listen for\n   * @param {function} listener The function event (s)\n   * @param {object | boolean} [options] object or useCapture flag for\n   * addEventListener\n   * @return {object} interact\n   */\n  on (type: string | Interact.EventTypes, listener: Interact.ListenersArg, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of (type as any[])) {\n        this.on(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.on(prop, (type as any)[prop], listener)\n      }\n\n      return this\n    }\n\n    // if it is an InteractEvent type, add listener to globalEvents\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      // if this type of event was never bound\n      if (!this.globalEvents[type]) {\n        this.globalEvents[type] = [listener]\n      }\n      else {\n        this.globalEvents[type].push(listener)\n      }\n    }\n    // If non InteractEvent type, addEventListener to document\n    else {\n      this.scope.events.add(this.scope.document, type, listener as Interact.Listener, { options })\n    }\n\n    return this\n  }\n\n  /**\n   * Removes a global InteractEvent listener or DOM event from `document`\n   *\n   * @alias module:interact.off\n   *\n   * @param {string | array | object} type The types of events that were listened\n   * for\n   * @param {function} listener The listener function to be removed\n   * @param {object | boolean} options [options] object or useCapture flag for\n   * removeEventListener\n   * @return {object} interact\n   */\n  off (type: Interact.EventTypes, listener: any, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type) {\n        this.off(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.off(prop, type[prop], listener)\n      }\n\n      return this\n    }\n\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      let index: number\n\n      if (type in this.globalEvents &&\n          (index = this.globalEvents[type].indexOf(listener)) !== -1) {\n        this.globalEvents[type].splice(index, 1)\n      }\n    }\n    else {\n      this.scope.events.remove(this.scope.document, type, listener, options)\n    }\n\n    return this\n  }\n\n  debug () {\n    return this.scope\n  }\n\n  /**\n   * @alias module:interact.supportsTouch\n   *\n   * @return {boolean} Whether or not the browser supports touch input\n   */\n  supportsTouch () {\n    return browser.supportsTouch\n  }\n\n  /**\n   * @alias module:interact.supportsPointerEvent\n   *\n   * @return {boolean} Whether or not the browser supports PointerEvents\n   */\n  supportsPointerEvent () {\n    return browser.supportsPointerEvent\n  }\n\n  /**\n   * Cancels all interactions (end events are not fired)\n   *\n   * @alias module:interact.stop\n   *\n   * @return {object} interact\n   */\n  stop () {\n    for (const interaction of this.scope.interactions.list) {\n      interaction.stop()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns or sets the distance the pointer must be moved before an action\n   * sequence occurs. This also affects tolerance for tap events.\n   *\n   * @alias module:interact.pointerMoveTolerance\n   *\n   * @param {number} [newValue] The movement from the start position must be greater than this value\n   * @return {interact | number}\n   */\n  pointerMoveTolerance (newValue?: number) {\n    if (is.number(newValue)) {\n      this.scope.interactions.pointerMoveTolerance = newValue\n\n      return this\n    }\n\n    return this.scope.interactions.pointerMoveTolerance\n  }\n\n  addDocument (doc: Document, options?: object) {\n    this.scope.addDocument(doc, options)\n  }\n\n  removeDocument (doc: Document) {\n    this.scope.removeDocument(doc)\n  }\n}\n\nexport default InteractStatic\n"
	]
}