{
	"version": 3,
	"sources": [
		"InteractStatic.ts"
	],
	"names": [
		"browser",
		"domUtils",
		"extend",
		"is",
		"pointerUtils",
		"isNonNativeEvent",
		"InteractStatic",
		"constructor",
		"scope",
		"this",
		"getPointerAverage",
		"pointerAverage",
		"getTouchBBox",
		"touchBBox",
		"getTouchDistance",
		"touchDistance",
		"getTouchAngle",
		"touchAngle",
		"getElementRect",
		"getElementClientRect",
		"matchesSelector",
		"closest",
		"globalEvents",
		"dynamicDrop",
		"version",
		"interact",
		"prototype",
		"target",
		"options",
		"interactable",
		"interactables",
		"get",
		"new",
		"events",
		"global",
		"key",
		"Object",
		"getOwnPropertyNames",
		"use",
		"plugin",
		"usePlugin",
		"isSet",
		"context",
		"on",
		"type",
		"listener",
		"string",
		"search",
		"trim",
		"split",
		"array",
		"eventType",
		"object",
		"prop",
		"actions",
		"push",
		"add",
		"document",
		"off",
		"index",
		"indexOf",
		"splice",
		"remove",
		"debug",
		"supportsTouch",
		"supportsPointerEvent",
		"stop",
		"interaction",
		"interactions",
		"list",
		"pointerMoveTolerance",
		"newValue",
		"number",
		"addDocument",
		"doc",
		"removeDocument"
	],
	"mappings": "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",
	"sourcesContent": [
		"/** @module interact */\nimport browser from '@interactjs/utils/browser'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport Interactable from './Interactable'\nimport { Options } from './defaultOptions'\nimport isNonNativeEvent from './isNonNativeEvent'\n\nexport interface InteractStatic {\n  (target: Interact.Target, options?: Options): Interactable\n}\n\nexport class InteractStatic {\n  // expose the functions used to calculate multi-touch properties\n  getPointerAverage  = pointerUtils.pointerAverage\n  getTouchBBox = pointerUtils.touchBBox\n  getTouchDistance = pointerUtils.touchDistance\n  getTouchAngle = pointerUtils.touchAngle\n\n  getElementRect = domUtils.getElementRect\n  getElementClientRect = domUtils.getElementClientRect\n  matchesSelector = domUtils.matchesSelector\n  closest = domUtils.closest\n\n  globalEvents: any = {}\n\n  dynamicDrop: (newValue?: boolean) => boolean | this\n\n  // eslint-disable-next-line no-undef\n  version = process.env.npm_package_version\n  interact: InteractStatic\n  scope: Interact.Scope\n\n  constructor (scope: Interact.Scope) {\n    this.scope = scope\n\n    const { prototype } = this.constructor\n\n    /**\n     * ```js\n     * interact('#draggable').draggable(true)\n     *\n     * var rectables = interact('rect')\n     * rectables\n     *   .gesturable(true)\n     *   .on('gesturemove', function (event) {\n     *       // ...\n     *   })\n     * ```\n     *\n     * The methods of this variable can be used to set elements as interactables\n     * and also to change various default settings.\n     *\n     * Calling it as a function and passing an element or a valid CSS selector\n     * string returns an Interactable object which has various methods to configure\n     * it.\n     *\n     * @global\n     *\n     * @param {Element | string} target The HTML or SVG Element to interact with\n     * or CSS selector\n     * @return {Interactable}\n     */\n    const interact = ((target, options) => {\n      let interactable = scope.interactables.get(target, options)\n\n      if (!interactable) {\n        interactable = scope.interactables.new(target, options)\n        interactable.events.global = this.globalEvents\n      }\n\n      return interactable\n    }) as InteractStatic\n\n    for (const key of Object.getOwnPropertyNames(this.constructor.prototype)) {\n      interact[key] = prototype[key]\n    }\n\n    extend(interact as any, this)\n    interact.constructor = this.constructor\n    this.interact = interact\n\n    return interact\n  }\n\n  /**\n   * Use a plugin\n   *\n   * @alias module:interact.use\n   *\n   * @param {Object} plugin\n   * @param {function} plugin.install\n   * @return {InteractStatic}\n   */\n  use (plugin: Interact.Plugin, options?: { [key: string]: any }) {\n    this.scope.usePlugin(plugin, options)\n\n    return this\n  }\n\n  /**\n   * Check if an element or selector has been set with the {@link interact}\n   * function\n   *\n   * @alias module:interact.isSet\n   *\n   * @param {Element} element The Element being searched for\n   * @return {boolean} Indicates if the element or CSS selector was previously\n   * passed to interact\n   */\n  isSet (target: Interact.Element, options?: any) {\n    return !!this.scope.interactables.get(target, options && options.context)\n  }\n\n  /**\n   * Add a global listener for an InteractEvent or adds a DOM event to `document`\n   *\n   * @alias module:interact.on\n   *\n   * @param {string | array | object} type The types of events to listen for\n   * @param {function} listener The function event (s)\n   * @param {object | boolean} [options] object or useCapture flag for\n   * addEventListener\n   * @return {object} interact\n   */\n  on (type: string | Interact.EventTypes, listener: Interact.ListenersArg, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of (type as any[])) {\n        this.on(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.on(prop, (type as any)[prop], listener)\n      }\n\n      return this\n    }\n\n    // if it is an InteractEvent type, add listener to globalEvents\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      // if this type of event was never bound\n      if (!this.globalEvents[type]) {\n        this.globalEvents[type] = [listener]\n      }\n      else {\n        this.globalEvents[type].push(listener)\n      }\n    }\n    // If non InteractEvent type, addEventListener to document\n    else {\n      this.scope.events.add(this.scope.document, type, listener as Interact.Listener, { options })\n    }\n\n    return this\n  }\n\n  /**\n   * Removes a global InteractEvent listener or DOM event from `document`\n   *\n   * @alias module:interact.off\n   *\n   * @param {string | array | object} type The types of events that were listened\n   * for\n   * @param {function} listener The listener function to be removed\n   * @param {object | boolean} options [options] object or useCapture flag for\n   * removeEventListener\n   * @return {object} interact\n   */\n  off (type: Interact.EventTypes, listener: any, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type) {\n        this.off(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.off(prop, type[prop], listener)\n      }\n\n      return this\n    }\n\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      let index: number\n\n      if (type in this.globalEvents &&\n          (index = this.globalEvents[type].indexOf(listener)) !== -1) {\n        this.globalEvents[type].splice(index, 1)\n      }\n    }\n    else {\n      this.scope.events.remove(this.scope.document, type, listener, options)\n    }\n\n    return this\n  }\n\n  debug () {\n    return this.scope\n  }\n\n  /**\n   * @alias module:interact.supportsTouch\n   *\n   * @return {boolean} Whether or not the browser supports touch input\n   */\n  supportsTouch () {\n    return browser.supportsTouch\n  }\n\n  /**\n   * @alias module:interact.supportsPointerEvent\n   *\n   * @return {boolean} Whether or not the browser supports PointerEvents\n   */\n  supportsPointerEvent () {\n    return browser.supportsPointerEvent\n  }\n\n  /**\n   * Cancels all interactions (end events are not fired)\n   *\n   * @alias module:interact.stop\n   *\n   * @return {object} interact\n   */\n  stop () {\n    for (const interaction of this.scope.interactions.list) {\n      interaction.stop()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns or sets the distance the pointer must be moved before an action\n   * sequence occurs. This also affects tolerance for tap events.\n   *\n   * @alias module:interact.pointerMoveTolerance\n   *\n   * @param {number} [newValue] The movement from the start position must be greater than this value\n   * @return {interact | number}\n   */\n  pointerMoveTolerance (newValue?: number) {\n    if (is.number(newValue)) {\n      this.scope.interactions.pointerMoveTolerance = newValue\n\n      return this\n    }\n\n    return this.scope.interactions.pointerMoveTolerance\n  }\n\n  addDocument (doc: Document, options?: object) {\n    this.scope.addDocument(doc, options)\n  }\n\n  removeDocument (doc: Document) {\n    this.scope.removeDocument(doc)\n  }\n}\n\nexport default InteractStatic\n"
	]
}