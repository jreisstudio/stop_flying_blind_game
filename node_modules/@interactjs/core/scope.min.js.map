{
	"version": 3,
	"sources": [
		"scope.ts"
	],
	"names": [
		"browser",
		"clone",
		"domObjects",
		"extend",
		"raf",
		"win",
		"Eventable",
		"InteractEvent",
		"InteractStatic",
		"InteractableBase",
		"InteractableSet",
		"defaults",
		"events",
		"interactions",
		"Scope",
		"constructor",
		"this",
		"id",
		"Math",
		"floor",
		"random",
		"isInitialized",
		"listenerMaps",
		"actions",
		"map",
		"phases",
		"start",
		"move",
		"end",
		"methodDict",
		"phaselessTypes",
		"interactStatic",
		"Interactable",
		"interactables",
		"_win",
		"document",
		"window",
		"documents",
		"_plugins",
		"list",
		"onWindowUnload",
		"event",
		"removeDocument",
		"target",
		"scope",
		"_defaults",
		"set",
		"options",
		"super",
		"fire",
		"interactable",
		"unset",
		"splice",
		"indexOf",
		"addListeners",
		"push",
		"name",
		"arg",
		"[object Object]",
		"listener",
		"init",
		"initScope",
		"pluginIsInstalled",
		"plugin",
		"usePlugin",
		"install",
		"listeners",
		"before",
		"index",
		"len",
		"length",
		"reduce",
		"acc",
		"addDocument",
		"doc",
		"getDocIndex",
		"getWindow",
		"add",
		"remove",
		"i",
		"getDocOptions",
		"docIndex",
		"now",
		"Date"
	],
	"mappings": "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",
	"sourcesContent": [
		"/* eslint-disable import/no-named-as-default-member */\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport domObjects from '@interactjs/utils/domObjects'\nimport extend from '@interactjs/utils/extend'\nimport raf from '@interactjs/utils/raf'\nimport win from '@interactjs/utils/window'\n\nimport Eventable from './Eventable'\nimport InteractEvent, { PhaseMap } from './InteractEvent'\nimport InteractStatic from './InteractStatic'\nimport InteractableBase from './Interactable'\nimport InteractableSet from './InteractableSet'\nimport defaults from './defaultOptions'\nimport events from './events'\nimport interactions from './interactions'\n\nexport interface SignalArgs {\n  'scope:add-document': DocSignalArg\n  'scope:remove-document': DocSignalArg\n  'interactable:unset': { interactable: InteractableBase }\n  'interactable:set': { interactable: InteractableBase, options: Interact.Options }\n  'interactions:destroy': { interaction: Interact.Interaction }\n}\n\nexport type ListenerName = keyof SignalArgs\n\nexport type ListenerMap = {\n  [P in ListenerName]?: (arg: SignalArgs[P], scope: Scope, signalName: P) => void | boolean\n}\n\ninterface DocSignalArg {\n  doc: Document\n  window: Window\n  scope: Scope\n  options?: { [index: string]: any }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ActionMap { // tslint:disable-line no-empty-interface\n}\n\nexport type ActionName = keyof ActionMap\n\nexport interface Actions {\n  map: ActionMap\n  phases: PhaseMap\n  methodDict: { [P in ActionName]?: string }\n  phaselessTypes: { [type: string]: true }\n}\n\nexport interface Plugin {\n  [key: string]: any\n  id?: string\n  listeners?: ListenerMap\n  before?: string[]\n  install? (scope: Scope, options?: any): void\n}\n\nexport default class Scope {\n  id = `__interact_scope_${Math.floor(Math.random() * 100)}`\n  isInitialized = false\n  listenerMaps: Array<{\n    map: ListenerMap\n    id: string\n  }> = []\n\n  browser = browser\n  defaults = clone(defaults) as typeof defaults\n  Eventable = Eventable\n  actions: Actions = {\n    map: {},\n    phases: {\n      start: true,\n      move: true,\n      end: true,\n    },\n    methodDict: {},\n    phaselessTypes: {},\n  }\n\n  interactStatic: any = new InteractStatic(this)\n  InteractEvent = InteractEvent\n  Interactable!: typeof InteractableBase\n  interactables = new InteractableSet(this)\n\n  // main window\n  _win!: Window\n\n  // main document\n  document!: Document\n\n  // main window\n  window!: Window\n\n  // all documents being listened to\n  documents: Array<{ doc: Document, options: any }> = []\n\n  _plugins: {\n    list: Plugin[]\n    map: { [id: string]: Plugin }\n  } = {\n    list: [],\n    map: {},\n  }\n\n  constructor () {\n    const scope = this\n\n    this.Interactable = class extends InteractableBase {\n      get _defaults () { return scope.defaults }\n\n      set (options: Interact.Options) {\n        super.set(options)\n\n        scope.fire('interactable:set', {\n          options,\n          interactable: this,\n        })\n\n        return this\n      }\n\n      unset () {\n        super.unset()\n        scope.interactables.list.splice(scope.interactables.list.indexOf(this), 1)\n\n        scope.fire('interactable:unset', { interactable: this })\n      }\n    }\n  }\n\n  addListeners (map: ListenerMap, id?: string) {\n    this.listenerMaps.push({ id, map })\n  }\n\n  fire<T extends ListenerName> (name: T, arg: SignalArgs[T]): void | false {\n    for (const { map: { [name]: listener } } of this.listenerMaps) {\n      if (!!listener && listener(arg as any, this, name as never) === false) {\n        return false\n      }\n    }\n  }\n\n  onWindowUnload = (event: BeforeUnloadEvent) => this.removeDocument(event.target as Document)\n\n  init (window: Window) {\n    return this.isInitialized\n      ? this\n      : initScope(this, window)\n  }\n\n  pluginIsInstalled (plugin: Plugin) {\n    return this._plugins.map[plugin.id] || this._plugins.list.indexOf(plugin) !== -1\n  }\n\n  usePlugin (plugin: Plugin, options?: { [key: string]: any }) {\n    if (!this.isInitialized) {\n      return this\n    }\n\n    if (this.pluginIsInstalled(plugin)) {\n      return this\n    }\n\n    if (plugin.id) { this._plugins.map[plugin.id] = plugin }\n    this._plugins.list.push(plugin)\n\n    if (plugin.install) {\n      plugin.install(this, options)\n    }\n\n    if (plugin.listeners && plugin.before) {\n      let index = 0\n      const len = this.listenerMaps.length\n      const before = plugin.before.reduce((acc, id) => {\n        acc[id] = true\n        return acc\n      }, {})\n\n      for (; index < len; index++) {\n        const otherId = this.listenerMaps[index].id\n\n        if (before[otherId]) { break }\n      }\n\n      this.listenerMaps.splice(index, 0, { id: plugin.id, map: plugin.listeners })\n    }\n    else if (plugin.listeners) {\n      this.listenerMaps.push({ id: plugin.id, map: plugin.listeners })\n    }\n\n    return this\n  }\n\n  addDocument (doc: Document, options?: any): void | false {\n    // do nothing if document is already known\n    if (this.getDocIndex(doc) !== -1) { return false }\n\n    const window = win.getWindow(doc)\n\n    options = options ? extend({}, options) : {}\n\n    this.documents.push({ doc, options })\n    this.events.documents.push(doc)\n\n    // don't add an unload event for the main document\n    // so that the page may be cached in browser history\n    if (doc !== this.document) {\n      this.events.add(window, 'unload', this.onWindowUnload)\n    }\n\n    this.fire('scope:add-document', { doc, window, scope: this, options })\n  }\n\n  removeDocument (doc: Document) {\n    const index = this.getDocIndex(doc)\n\n    const window = win.getWindow(doc)\n    const options = this.documents[index].options\n\n    this.events.remove(window, 'unload', this.onWindowUnload)\n\n    this.documents.splice(index, 1)\n    this.events.documents.splice(index, 1)\n\n    this.fire('scope:remove-document', { doc, window, scope: this, options })\n  }\n\n  getDocIndex (doc: Document) {\n    for (let i = 0; i < this.documents.length; i++) {\n      if (this.documents[i].doc === doc) {\n        return i\n      }\n    }\n\n    return -1\n  }\n\n  getDocOptions (doc: Document) {\n    const docIndex = this.getDocIndex(doc)\n\n    return docIndex === -1 ? null : this.documents[docIndex].options\n  }\n\n  now () {\n    return ((this.window as any).Date as typeof Date || Date).now()\n  }\n}\n\nexport function initScope (scope: Scope, window: Window) {\n  scope.isInitialized = true\n  win.init(window)\n  domObjects.init(window)\n  browser.init(window)\n  raf.init(window)\n\n  scope.window = window\n  scope.document = window.document\n\n  scope.usePlugin(interactions)\n  scope.usePlugin(events)\n\n  return scope\n}\n\nexport { Scope }\n"
	]
}