{
	"version": 3,
	"sources": [
		"base.ts"
	],
	"names": [
		"Interaction",
		"Scope",
		"domUtils",
		"extend",
		"getOriginXY",
		"PointerEvent",
		"defaults",
		"holdDuration",
		"ignoreFrom",
		"allowFrom",
		"origin",
		"x",
		"y",
		"pointerEvents",
		"id",
		"install",
		"listeners",
		"addInteractionProps",
		"addHoldInfo",
		"moveAndClearHold",
		"arg",
		"scope",
		"downAndStartHold",
		"fire",
		"clearHold",
		"tapAfterUp",
		"collectEventTargets",
		"types",
		"down",
		"move",
		"up",
		"cancel",
		"tap",
		"doubletap",
		"hold",
		"interaction",
		"pointer",
		"event",
		"eventTarget",
		"type",
		"targets",
		"pointerEvent",
		"now",
		"signalArg",
		"i",
		"length",
		"target",
		"prop",
		"props",
		"eventable",
		"node",
		"_subtractOrigin",
		"currentTarget",
		"_addOrigin",
		"immediatePropagationStopped",
		"propagationStopped",
		"prevTap",
		"double",
		"tapTime",
		"timeStamp",
		"pointerIndex",
		"getPointerIndex",
		"pointerInfo",
		"pointers",
		"pointerWasMoved",
		"downTarget",
		"path",
		"getPath",
		"filter",
		"options",
		"duration",
		"Infinity",
		"timeout",
		"clearTimeout",
		"duplicate",
		"pointerIsDown",
		"timer",
		"minDuration",
		"setTimeout",
		"actions",
		"phaselessTypes"
	],
	"mappings": "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",
	"sourcesContent": [
		"import Eventable from '@interactjs/core/Eventable'\nimport Interaction from '@interactjs/core/Interaction'\nimport { PerActionDefaults } from '@interactjs/core/defaultOptions'\nimport Scope from '@interactjs/core/scope'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport getOriginXY from '@interactjs/utils/getOriginXY'\n\nimport PointerEvent from './PointerEvent'\n\nexport type EventTargetList = Array<{\n  node: Node\n  eventable: Eventable\n  props: { [key: string]: any }\n}>\n\nexport interface PointerEventOptions extends PerActionDefaults {\n  enabled?: undefined // not used\n  holdDuration?: number\n  ignoreFrom?: any\n  allowFrom?: any\n  origin?: Interact.Point | string | Interact.Element\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    pointerEvents: typeof pointerEvents\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    prevTap?: PointerEvent<string>\n    tapTime?: number\n  }\n}\n\ndeclare module '@interactjs/core/PointerInfo' {\n  interface PointerInfo {\n    hold?: {\n      duration: number\n      timeout: any\n    }\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    pointerEvents: Interact.Options\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'pointerEvents:new': { pointerEvent: PointerEvent<any> }\n    'pointerEvents:fired': {\n      interaction: Interaction\n      pointer: Interact.PointerType | PointerEvent<any>\n      event: Interact.PointerEventType | PointerEvent<any>\n      eventTarget: Interact.EventTarget\n      pointerEvent: PointerEvent<any>\n      targets?: EventTargetList\n      type: string\n    }\n    'pointerEvents:collect-targets': {\n      interaction: Interaction\n      pointer: Interact.PointerType | PointerEvent<any>\n      event: Interact.PointerEventType | PointerEvent<any>\n      eventTarget: Interact.EventTarget\n      targets?: EventTargetList\n      type: string\n      path: Node[]\n      node: null\n    }\n  }\n}\n\nconst defaults: PointerEventOptions = {\n  holdDuration: 600,\n  ignoreFrom  : null,\n  allowFrom   : null,\n  origin      : { x: 0, y: 0 },\n}\n\nconst pointerEvents: Interact.Plugin = {\n  id: 'pointer-events/base',\n  install,\n  listeners: {\n    'interactions:new': addInteractionProps,\n    'interactions:update-pointer': addHoldInfo,\n    'interactions:move': moveAndClearHold,\n    'interactions:down': (arg, scope) => {\n      downAndStartHold(arg, scope)\n      fire(arg, scope)\n    },\n    'interactions:up': (arg, scope) => {\n      clearHold(arg)\n      fire(arg, scope)\n      tapAfterUp(arg, scope)\n    },\n    'interactions:cancel': (arg, scope) => {\n      clearHold(arg)\n      fire(arg, scope)\n    },\n  },\n  PointerEvent,\n  fire,\n  collectEventTargets,\n  defaults,\n  types: {\n    down: true,\n    move: true,\n    up: true,\n    cancel: true,\n    tap: true,\n    doubletap: true,\n    hold: true,\n  } as { [type: string]: true },\n}\n\nfunction fire<T extends string> (\n  arg: {\n    pointer: Interact.PointerType | PointerEvent<any>\n    event: Interact.PointerEventType | PointerEvent<any>\n    eventTarget: Interact.EventTarget\n    interaction: Interaction\n    type: T\n    targets?: EventTargetList\n  },\n  scope: Interact.Scope,\n) {\n  const {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    type,\n    targets = collectEventTargets(arg, scope),\n  } = arg\n\n  const pointerEvent = new PointerEvent(type, pointer, event, eventTarget, interaction, scope.now())\n\n  scope.fire('pointerEvents:new', { pointerEvent })\n\n  const signalArg = {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    targets,\n    type,\n    pointerEvent,\n  }\n\n  for (let i = 0; i < targets.length; i++) {\n    const target = targets[i]\n\n    for (const prop in target.props || {}) {\n      (pointerEvent as any)[prop] = target.props[prop]\n    }\n\n    const origin = getOriginXY(target.eventable, target.node)\n\n    pointerEvent._subtractOrigin(origin)\n    pointerEvent.eventable = target.eventable\n    pointerEvent.currentTarget = target.node\n\n    target.eventable.fire(pointerEvent)\n\n    pointerEvent._addOrigin(origin)\n\n    if (pointerEvent.immediatePropagationStopped ||\n        (pointerEvent.propagationStopped &&\n            (i + 1) < targets.length && targets[i + 1].node !== pointerEvent.currentTarget)) {\n      break\n    }\n  }\n\n  scope.fire('pointerEvents:fired', signalArg)\n\n  if (type === 'tap') {\n    // if pointerEvent should make a double tap, create and fire a doubletap\n    // PointerEvent and use that as the prevTap\n    const prevTap = pointerEvent.double\n      ? fire({\n        interaction,\n        pointer,\n        event,\n        eventTarget,\n        type: 'doubletap',\n      }, scope)\n      : pointerEvent\n\n    interaction.prevTap = prevTap\n    interaction.tapTime = prevTap.timeStamp\n  }\n\n  return pointerEvent\n}\n\nfunction collectEventTargets<T extends string> ({ interaction, pointer, event, eventTarget, type }: {\n  interaction: Interaction\n  pointer: Interact.PointerType | PointerEvent<any>\n  event: Interact.PointerEventType | PointerEvent<any>\n  eventTarget: Interact.EventTarget\n  type: T\n}, scope: Interact.Scope) {\n  const pointerIndex = interaction.getPointerIndex(pointer)\n  const pointerInfo = interaction.pointers[pointerIndex]\n\n  // do not fire a tap event if the pointer was moved before being lifted\n  if (type === 'tap' && (interaction.pointerWasMoved ||\n      // or if the pointerup target is different to the pointerdown target\n      !(pointerInfo && pointerInfo.downTarget === eventTarget))) {\n    return []\n  }\n\n  const path = domUtils.getPath(eventTarget as Interact.Element | Document)\n  const signalArg = {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    type,\n    path,\n    targets: [] as EventTargetList,\n    node: null,\n  }\n\n  for (const node of path) {\n    signalArg.node = node\n\n    scope.fire('pointerEvents:collect-targets', signalArg)\n  }\n\n  if (type === 'hold') {\n    signalArg.targets = signalArg.targets.filter(target =>\n      target.eventable.options.holdDuration === interaction.pointers[pointerIndex].hold.duration)\n  }\n\n  return signalArg.targets\n}\n\nfunction addInteractionProps ({ interaction }) {\n  interaction.prevTap = null   // the most recent tap event on this interaction\n  interaction.tapTime = 0     // time of the most recent tap event\n}\n\nfunction addHoldInfo ({ down, pointerInfo }: Interact.SignalArgs['interactions:update-pointer']) {\n  if (!down && pointerInfo.hold) {\n    return\n  }\n\n  pointerInfo.hold = { duration: Infinity, timeout: null }\n}\n\nfunction clearHold ({ interaction, pointerIndex }) {\n  if (interaction.pointers[pointerIndex].hold) {\n    clearTimeout(interaction.pointers[pointerIndex].hold.timeout)\n  }\n}\n\nfunction moveAndClearHold (\n  { interaction, pointer, event, eventTarget, duplicate }: Interact.SignalArgs['interactions:move'],\n  scope: Interact.Scope,\n) {\n  const pointerIndex = interaction.getPointerIndex(pointer)\n\n  if (!duplicate && (!interaction.pointerIsDown || interaction.pointerWasMoved)) {\n    if (interaction.pointerIsDown) {\n      clearTimeout(interaction.pointers[pointerIndex].hold.timeout)\n    }\n\n    fire({\n      interaction,\n      pointer,\n      event,\n      eventTarget: eventTarget as Interact.Element,\n      type: 'move',\n    }, scope)\n  }\n}\n\nfunction downAndStartHold ({ interaction, pointer, event, eventTarget, pointerIndex }: Interact.SignalArgs['interactions:down'], scope: Interact.Scope) {\n  const timer = interaction.pointers[pointerIndex].hold\n  const path = domUtils.getPath(eventTarget as Interact.Element | Document)\n  const signalArg = {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    type: 'hold',\n    targets: [] as EventTargetList,\n    path,\n    node: null,\n  }\n\n  for (const node of path) {\n    signalArg.node = node\n\n    scope.fire('pointerEvents:collect-targets', signalArg)\n  }\n\n  if (!signalArg.targets.length) { return }\n\n  let minDuration = Infinity\n\n  for (const target of signalArg.targets) {\n    const holdDuration = target.eventable.options.holdDuration\n\n    if (holdDuration < minDuration) {\n      minDuration = holdDuration\n    }\n  }\n\n  timer.duration = minDuration\n  timer.timeout = setTimeout(() => {\n    fire({\n      interaction,\n      eventTarget,\n      pointer,\n      event,\n      type: 'hold',\n    }, scope)\n  }, minDuration)\n}\n\nfunction tapAfterUp ({ interaction, pointer, event, eventTarget }: Interact.SignalArgs['interactions:up'], scope: Interact.Scope) {\n  if (!interaction.pointerWasMoved) {\n    fire({ interaction, eventTarget, pointer, event, type: 'tap' }, scope)\n  }\n}\n\nfunction install (scope: Scope) {\n  scope.pointerEvents = pointerEvents\n  scope.defaults.actions.pointerEvents = pointerEvents.defaults\n  extend(scope.actions.phaselessTypes, pointerEvents.types)\n}\n\nexport default pointerEvents\n"
	]
}